/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2019  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const Events = require('events');
const { join } = require('path');
const { existsSync } = require('fs');
const { promisify } = require('util');
const cp = require('child_process');
const exec = promisify(cp.exec);

class Updatable extends Events {
  constructor (basePath, entityID) {
    super();
    this.basePath = basePath;
    if (!this.entityID) {
      // It might be pre-defined by plugin manager
      this.entityID = entityID;
    }
    this.entityPath = join(this.basePath, this.entityID);
  }

  isUpdatable () {
    return existsSync(join(this.basePath, this.entityID, '.git'));
  }

  getGitRepo () {
    return exec('git remote get-url origin', { cwd: this.entityPath })
      .then(r => r.stdout.toString().match(/github\.com[:/]([\w-_]+\/[\w-_]+)/)[1]);
  }

  async checkForUpdates () {
    const cwd = { cwd: this.entityPath };

    await exec('git fetch', cwd);
    const gitStatus = await exec('git status -uno', cwd).then(({ stdout }) => stdout.toString());
    return gitStatus.includes('git pull');
  }

  async getUpdateCommits () {
    const cwd = { cwd: this.entityPath };
    const branch = await exec('git branch', cwd)
      .then(({ stdout }) =>
        stdout.toString().split('\n').find(l => l.startsWith('*')).slice(2).trim()
      );

    const commits = [];
    const gitLog = await exec(`git log --format="%H %an %s" ..origin/${branch}`, cwd).then(({ stdout }) => stdout.toString());
    const lines = gitLog.split('\n');
    lines.pop();
    lines.forEach(line => {
      const data = line.split(' ');
      commits.push({
        id: data.shift(),
        author: data.shift(),
        message: data.join(' ')
      });
    });
    return commits;
  }

  // eslint-disable-next-line no-unused-vars,no-empty-function
  async update (force = false) {

  }
}

module.exports = Updatable;
