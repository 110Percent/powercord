/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2019  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { React, getModule } = require('powercord/webpack');

const SliderItem = require('./Slider.jsx');
const ButtonItem = require('./Button.jsx');
const SubmenuItem = require('./Submenu.jsx');
const CheckboxItem = require('./Checkbox.jsx');

let oldState = null;

module.exports = class ContextMenu extends React.Component {
  constructor () {
    super();

    this.state = oldState || {
      itemClasses: ''
    };
  }

  async componentDidMount () {
    const itemClasses = (await getModule([ 'itemToggle', 'checkbox' ]));

    if (!this.state.itemClasses) {
      this.setState({ itemClasses });
    }
  }

  componentWillUnmount () {
    oldState = this.state;
  }

  render () {
    const { itemClasses } = this.state;
    if (!itemClasses) {
      return null;
    }

    const children = this.props.itemGroups.map(items => (
      <div className={itemClasses.itemGroup}>
        {items.map(item => {
          switch (item.type) {
            case 'slider':
              return <SliderItem {...item} itemClasses={itemClasses} />;

            case 'button':
              return <ButtonItem {...item} itemClasses={itemClasses} />;

            case 'submenu':
              return <SubmenuItem {...item} itemClasses={itemClasses} />;

            case 'checkbox':
              return <CheckboxItem {...item} itemClasses={itemClasses} />;

            default:
              return null;
          }
        })}
      </div>
    ));

    return (
      <div className={itemClasses.contextMenu} style={{
        bottom: `${window.innerHeight - this.props.pageY}px`,
        width: this.props.width
      }}>
        <div className='scroller'>
          {children}
        </div>
      </div>
    );
  }
};
