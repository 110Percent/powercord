/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2019  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { AsyncComponent } = require('powercord/components');
const { React, getModule, getModuleByDisplayName, contextMenu } = require('powercord/webpack');

const SliderItem = require('./Slider.jsx');
const ButtonItem = require('./Button.jsx');
const CheckboxItem = require('./Checkbox.jsx');

const SubMenuItem = AsyncComponent.from(getModuleByDisplayName('FluxContainer(SubMenuItem)'));

let oldState = null;

class SubmenuItem extends React.Component {
  constructor (props) {
    super(props);

    this.state = oldState || {
      itemClasses: props.itemClasses || '',
      items: []
    };
  }

  onClick () {
    contextMenu.closeContextMenu();
    if (this.props.onClick) {
      this.props.onClick();
    }
  }

  async componentDidMount () {
    const itemClasses = (await getModule([ 'itemToggle', 'checkbox' ]));

    if (!this.state.itemClasses) {
      this.setState({ itemClasses });
    }

    const items = await this.props.getItems();
    return this.setState({ items });
  }

  componentWillUnmount () {
    oldState = this.state;
  }

  render () {
    const { itemClasses } = this.state;
    if (!this.state.items) {
      return null;
    }

    const submenu = React.createElement(SubMenuItem, {
      label: this.props.name,
      render: this.state.items.map(item => {
        switch (item.type) {
          case 'slider':
            return <SliderItem {...item} itemClasses={itemClasses} />;

          case 'button':
            return <ButtonItem {...item} itemClasses={itemClasses} />;

          case 'submenu':
            return <SubmenuItem {...item} itemClasses={itemClasses} />;

          case 'checkbox':
            return <CheckboxItem {...item} itemClasses={itemClasses} />;

          default:
            return null;
        }
      }),
      action: () => this.onClick()
    });

    if (this.props.seperate) {
      return (
        <div className={`${itemClasses.itemGroup} seperated`}>
          {submenu}
        </div>
      );
    }

    return submenu;
  }
}

module.exports = SubmenuItem;
