/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2019  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { React, getModule, contextMenu } = require('powercord/webpack');

let oldState = null;

/*
 * let ContextMenu;
 * setImmediate(() => (
 *   ContextMenu = require('./ContextMenu.jsx')
 * ));
 */

class SubmenuItem extends React.Component {
  constructor (props) {
    super(props);

    this.state = oldState || {
      itemClasses: props.itemClasses || '',
      hovered: false,
      items: [],
      coords: {
        x: 0,
        y: 0
      }
    };
  }

  onClick ({ target }) {
    if (target.childNodes[0].nodeValue !== this.props.name) {
      return;
    }

    contextMenu.closeContextMenu();
    if (this.props.onClick) {
      this.props.onClick();
    }
  }

  onEnter (evt) {
    const { x, y, height } = evt.target.getBoundingClientRect();

    this.setState({
      hovered: true,
      coords: {
        x,
        y: y + height + 2
      }
    });
  }

  onLeave () {
    this.setState({
      hovered: false
    });
  }

  async componentDidMount () {
    const itemClasses = (await getModule([ 'itemToggle', 'checkbox' ]));

    if (!this.state.itemClasses) {
      this.setState({ itemClasses });
    }

    const items = await this.props.getItems();
    return this.setState({ items });
  }

  componentWillUnmount () {
    oldState = this.state;
  }

  render () {
    const { itemClasses } = this.state;
    const submenu = (
      <div
        className={[
          itemClasses.item,
          itemClasses.itemSubMenu,
          this.props.className || '',
          this.props.image ? itemClasses.itemImage : '',
          itemClasses.disabled
        ].join(' ')}
        // onClick={this.onClick.bind(this)}
        onMouseEnter={this.onEnter.bind(this)}
        onMouseLeave={this.onLeave.bind(this)}
      >
        <div className={itemClasses.label}>
          {this.props.name}
        </div>

        {
          this.state.hovered && this.state.items[0]
            ? this.getSubContextMenu()
            : null
        }

        {this.props.image
          ? this.getSubmenuImage()
          : <div className={itemClasses.hint}>
            {this.props.hint}
          </div>}

        <svg className={itemClasses.caret} width='24' height='24' viewBox='0 0 24 24'>
          <path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M16.59 8.59004L12 13.17L7.41 8.59004L6 10L12 16L18 10L16.59 8.59004Z"></path>
        </svg>
      </div>
    );

    if (this.props.seperate) {
      return (
        <div className={`${itemClasses.itemGroup} seperated`}>
          {submenu}
        </div>
      );
    }

    return submenu;
  }

  getSubmenuImage () {
    const { itemClasses } = this.state;
    return (
      this.props.image.startsWith('fa-')
        ? <div style={{ cursor: 'pointer !important',
          marginRight: '10px' }} class={`${this.props.image.endsWith('-regular')
          ? 'far'
          : this.props.image.endsWith('-brand')
            ? 'fab'
            : 'fas'}
          ${this.props.image.replace(/-regular|-brand/gi, '')} fa-fw`} />
        : <img alt className={`${itemClasses.image} ${this.props.iconClassName || ''}`}
          style={{ marginRight: '10px' }} src={this.props.image} />
    );
  }

  getSubContextMenu () {
    /*
     * return (
     * <ContextMenu
     *   pageX={this.state.coords.x}
     *   pageY={this.state.coords.y}
     *   width={this.props.width || ''}
     *   itemGroups={[ this.state.items ]}
     * />
     *);
     */
  }
}

module.exports = SubmenuItem;
