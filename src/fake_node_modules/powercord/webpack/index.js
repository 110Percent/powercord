const { sleep } = require('powercord/util');
const moduleFilters = require('./modules.json');

module.exports = class Webpack {
  /**
   * Grabs a module from the Webpack store
   * @param {Function|Array} filter Filter used to grab the module. Can be a function or an array of keys the object must have.
   * @param {Boolean} retry Wheter or not to retry fetching if the module is not found. Each try will be delayed by 100ms and max retries is 16.
   * @returns {Promise<object>|object} The found module. A promise will always be returned, unless retry is false.
   */
  static getModule (filter, retry = true) {
    if (Array.isArray(filter)) {
      const keys = filter;
      filter = m => keys.every(key => m.hasOwnProperty(key) || (m.__proto__ && m.__proto__.hasOwnProperty(key)));
    }

    if (!retry) {
      return Webpack._getModules(filter);
    }

    return new Promise(async (res) => {
      let mdl;
      for (let i = 0; i < 21; i++) {
        mdl = Webpack._getModules(filter);
        if (mdl) {
          return res(mdl);
        }
        await sleep(200);
      }

      res(mdl);
    });
  }

  /**
   * Grabs all found modules from the webpack store
   * @param {Function|Array} filter Filter used to grab the module. Can be a function or an array of keys the object must have.
   * @returns {Array<object>} The found modules.
   */
  static getAllModules (filter) {
    if (Array.isArray(filter)) {
      const keys = filter;
      filter = m => keys.every(key => m.hasOwnProperty(key) || (m.__proto__ && m.__proto__.hasOwnProperty(key)));
    }

    return Webpack._getModules(filter, true).map(mdl => mdl.exports.default || mdl.exports);
  }

  /**
   * Grabs a React component by its display name
   * @param {String} displayName Component's display name.
   * @param {Boolean} retry Wheter or not to retry fetching if the module is not found. Each try will be delayed by 100ms and max retries is 16.
   * @returns {Promise<object>|object} The component. A promise will always be returned, unless retry is false.
   */
  static getModuleByDisplayName (displayName, retry = false) {
    return Webpack.getModule(m => m.displayName && m.displayName.toLowerCase() === displayName.toLowerCase(), retry);
  }

  /**
   * Initializes the injection into Webpack
   * @returns Promise<Void>
   */
  static async init () {
    // Wait untill webpack is ready
    while (!window.webpackJsonp) {
      await sleep(1);
    }

    // Extract values from webpack
    const moduleID = Math.random.toString();
    const instance = webpackJsonp.push([
      [],
      {
        [moduleID]: (_, e, r) => {
          e.cache = r.c;
          e.require = r;
        }
      },
      [ [ moduleID ] ]
    ]);
    delete instance.cache[moduleID];
    Webpack.instance = instance;

    // Load modules pre-fetched
    for (const mdl in moduleFilters) {
      // noinspection JSUnfilteredForInLoop
      Webpack[mdl] = await Webpack.getModule(moduleFilters[mdl]);
    }
  }

  static _getModules (filter, all = false) {
    const filterFunction = m => (
      m.exports && (
        filter(m.exports) ||
        (m.exports.default && filter(m.exports.default))
      )
    );

    const moduleInstances = Object.values(Webpack.instance.cache);
    const modules = all ? moduleInstances.filter(filterFunction) : moduleInstances.find(filterFunction);

    return Array.isArray(modules)
      ? modules.map(mdl => mdl.exports.default || mdl.exports)
      : (modules
        ? (typeof modules.exports.default !== 'string' && modules.exports.default) || modules.exports
        : null);
  }
};
